// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model
model User {
  id          String   @id @db.Uuid
  email       String   @unique
  username    String   @unique
  avatarUrl   String?  @map("avatar_url")
  bio         String?
  socialLinks Json?    @map("social_links")
  skills      String[]
  experience  String?
  isPublic    Boolean  @default(true) @map("is_public")

  projects     Project[]
  projectLikes ProjectLike[]
  comments     ProjectComment[]
  commentLikes ProjectCommentLike[]

  // 커뮤니티 관계
  communityPosts        CommunityPost[]
  communityPostLikes    CommunityPostLike[]
  communityPostComments CommunityPostComment[]
  communityCommentLikes CommunityPostCommentLike[]

  // 커뮤니티 통계 (비정규화 - 성능을 위해)
  communityPostsCount Int @default(0) @map("community_posts_count")
  helpfulAnswersCount Int @default(0) @map("helpful_answers_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Project model
model Project {
  id                  String   @id @db.Uuid
  // 제목
  title               String
  // 간단한 설명
  excerpt             String
  // 카테고리
  category            String
  // 상세 설명 (기존 - 검색용 플레인 텍스트)
  description         String
  // 리치 텍스트 에디터 데이터
  fullDescription     String?  @map("full_description") // 검색용 플레인 텍스트
  fullDescriptionJson Json?    @map("full_description_json") // TipTap JSON 데이터
  fullDescriptionHtml String?  @map("full_description_html") // 렌더링용 HTML
  // 대표 이미지, 추가 스크린샷
  images              String[]

  demoUrl   String? @map("demo_url")
  githubUrl String? @map("github_url")

  // 주요기능
  features String[]

  // 태그 관계
  projectTags       ProjectTag[]

  viewCount Int     @default(0) @map("view_count")
  likeCount Int     @default(0) @map("like_count")
  featured  Boolean @default(false)

  authorId String @map("author_id") @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])

  likes    ProjectLike[]
  comments ProjectComment[]

  // 커뮤니티 관계
  relatedCommunityPosts CommunityPost[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@index([createdAt])
  @@map("projects")
}

// Project Like model
model ProjectLike {
  id        String @id @db.Uuid
  userId    String @map("user_id") @db.Uuid
  projectId String @map("project_id") @db.Uuid

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, projectId])
  @@map("project_likes")
}

// Tag model
model Tag {
  id   String @id @db.Uuid
  name String @unique

  projectTags       ProjectTag[]

  // 커뮤니티 관계
  communityPostTags CommunityPostTag[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tags")
}

// Project-Tag 연결 테이블
model ProjectTag {
  id        String @id @db.Uuid
  projectId String @map("project_id") @db.Uuid
  tagId     String @map("tag_id") @db.Uuid

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([projectId, tagId])
  @@map("project_tags")
}


// ProjectComment model
model ProjectComment {
  id           String  @id @db.Uuid
  content      String
  projectId    String  @map("project_id") @db.Uuid
  authorId     String  @map("author_id") @db.Uuid
  parentId     String? @map("parent_id") @db.Uuid
  likeCount    Int     @default(0) @map("like_count")
  repliesCount Int     @default(0) @map("replies_count")

  project Project          @relation(fields: [projectId], references: [id])
  author  User             @relation(fields: [authorId], references: [id])
  parent  ProjectComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies ProjectComment[] @relation("CommentReplies")

  likes ProjectCommentLike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([authorId])
  @@index([parentId])
  @@index([likeCount])
  @@index([repliesCount])
  @@index([createdAt])
  @@map("project_comments")
}

// ProjectComment Like model
model ProjectCommentLike {
  id        String @id @db.Uuid
  userId    String @map("user_id") @db.Uuid
  commentId String @map("comment_id") @db.Uuid

  user    User           @relation(fields: [userId], references: [id])
  comment ProjectComment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, commentId])
  @@map("project_comment_likes")
}

// ============================================================================
// COMMUNITY MODELS
// ============================================================================

// Community Post model
model CommunityPost {
  id          String  @id @db.Uuid
  title       String
  content     String // 검색용 플레인 텍스트
  contentHtml String? @map("content_html") // 렌더링용 HTML
  contentJson Json?   @map("content_json") // TipTap JSON 데이터

  // 메타데이터
  viewsCount    Int @default(0) @map("views_count")
  likesCount    Int @default(0) @map("likes_count")
  commentsCount Int @default(0) @map("comments_count")

  // 관계
  authorId String @map("author_id") @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])

  // 선택적 프로젝트 연결
  relatedProjectId String?  @map("related_project_id") @db.Uuid
  relatedProject   Project? @relation(fields: [relatedProjectId], references: [id])

  // 관련 데이터
  tags     CommunityPostTag[]
  likes    CommunityPostLike[]
  comments CommunityPostComment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([authorId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([viewsCount])
  @@map("community_posts")
}

// Community Post Like model
model CommunityPostLike {
  id     String @id @db.Uuid
  userId String @map("user_id") @db.Uuid
  postId String @map("post_id") @db.Uuid

  user User          @relation(fields: [userId], references: [id])
  post CommunityPost @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@map("community_post_likes")
}

// Community Post Comment model
model CommunityPostComment {
  id          String  @id @db.Uuid
  content     String
  contentHtml String? @map("content_html") // 리치 텍스트 지원
  contentJson Json?   @map("content_json")

  // 관계
  postId   String  @map("post_id") @db.Uuid
  authorId String  @map("author_id") @db.Uuid
  parentId String? @map("parent_id") @db.Uuid // null = 최상위 댓글, not null = 답글

  post   CommunityPost         @relation(fields: [postId], references: [id])
  author User                  @relation(fields: [authorId], references: [id])
  parent CommunityPostComment? @relation("CommunityCommentReplies", fields: [parentId], references: [id])

  // 상태
  likesCount   Int     @default(0) @map("likes_count")
  repliesCount Int     @default(0) @map("replies_count")
  isBestAnswer Boolean @default(false) @map("is_best_answer") // 질문의 채택 답변

  // 관련 데이터
  replies CommunityPostComment[]     @relation("CommunityCommentReplies")
  likes   CommunityPostCommentLike[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([isBestAnswer])
  @@index([createdAt])
  @@map("community_post_comments")
}

// Community Post Comment Like model
model CommunityPostCommentLike {
  id        String @id @db.Uuid
  userId    String @map("user_id") @db.Uuid
  commentId String @map("comment_id") @db.Uuid

  user    User                 @relation(fields: [userId], references: [id])
  comment CommunityPostComment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, commentId])
  @@map("community_post_comment_likes")
}

// Community Post Tag model
model CommunityPostTag {
  id     String @id @db.Uuid
  postId String @map("post_id") @db.Uuid
  tagId  String @map("tag_id") @db.Uuid

  post CommunityPost @relation(fields: [postId], references: [id])
  tag  Tag           @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([postId, tagId])
  @@map("community_post_tags")
}
